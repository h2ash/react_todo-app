{"version":3,"sources":["components/InputField.jsx","components/ToggleCompleted.jsx","components/TodoItem.jsx","components/TodoList.jsx","components/FilterButtons.jsx","components/ClearButton.jsx","App.js","index.js"],"names":["InputField","state","title","handleInput","event","value","target","_this","setState","handleSubmit","preventDefault","props","addNewTodo","this","react_default","a","createElement","onSubmit","onBlur","name","onChange","className","placeholder","React","Component","ToggleCompleted","_ref","toggleAll","type","id","htmlFor","TodoItem","deleteItem","todo","toggleChecked","completed","checked","onClick","TodoList","filteredTodos","map","components_TodoItem","key","FilterButtons","idOfA","filterByAndToggleCSS","filteredBy","handleFilter","_this2","href","ClearButton","todoList","deleteAllCompletedTodos","style","display","some","App","count","text","todoItem","prevState","todos","concat","Object","toConsumableArray","countUncompletedTodos","filter","item","length","uncompletedTodos","taskId","withoutRemovedItems","filterBy","objectSpread","every","_this$state","components_InputField","components_ToggleCompleted","components_TodoList","components_FilterButtons","components_ClearButton","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9ac73340.chunk.js","sourcesContent":["import React from 'react'\n\nclass InputField extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleInput = (event) => {\n    const {value} = event.target;\n\n    this.setState({\n      title: value,\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.state.title) {\n      this.props.addNewTodo(this.state.title);\n\n      this.setState({\n        title: '',\n      })\n    }\n  }\n\n  render() {\n    const {title} = this.state;\n\n    return (\n      <form \n        onSubmit={this.handleSubmit}\n        onBlur={this.handleSubmit}\n        >\n        <input\n          name='todo'\n          value={title}\n          onChange={this.handleInput}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    )\n  }\n}\n\nexport default InputField","import React from 'react'\n\nconst ToggleCompleted = ({toggleAll}) => {\n  return (\n    <div>\n      <input \n        type=\"checkbox\" \n        id=\"toggle-all\" \n        className=\"toggle-all\" \n        onChange={toggleAll}\n        />\n      <label \n      htmlFor=\"toggle-all\">\n        Mark all as complete\n      </label>\n    </div>\n  )\n}\n\nexport default ToggleCompleted","import React from 'react'\n\nconst TodoItem = ({ deleteItem, todo, toggleChecked }) => {\n\n  return (\n    <li className={todo.completed ? 'completed' : ''}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={todo.id}\n          checked={todo.completed}\n          onChange={() => toggleChecked(todo.id)}\n        />\n        <label htmlFor={todo.id}>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteItem(todo.id)}\n        />\n      </div>\n    </li>\n  )\n}\n\nexport default TodoItem","import React from 'react'\nimport TodoItem from './TodoItem'\n\nconst TodoList = ({ filteredTodos, toggleChecked, deleteItem }) => (\n  <ul className=\"todo-list\">\n      {filteredTodos.map(todo => (\n      <TodoItem \n        key={todo.id}\n        todo={todo}\n        toggleChecked={toggleChecked}\n        deleteItem={deleteItem}\n      />\n    ))}\n  </ul>\n\n)\n\nexport default TodoList","import React from 'react'\n\nclass FilterButtons extends React.Component {\n  state = {\n    idOfA: 1,\n  }\n\n  filterByAndToggleCSS = (id, filteredBy) => {\n    this.setState({\n      idOfA: id,\n    });\n\n    this.props.handleFilter(filteredBy);\n  }\n\n  render() {\n    return (\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            // className=\"selected\"\n            className={this.state.idOfA === 1 && 'selected'}\n            onClick={() => this.filterByAndToggleCSS(1, 'All')}\n          >\n            All\n          </a>\n        </li>\n      \n        <li>\n          <a \n            href=\"#/active\" \n            className={this.state.idOfA === 2 && 'selected'}\n            onClick={() => this.filterByAndToggleCSS(2, 'Active')}\n            >\n            Active\n          </a>\n        </li>\n      \n        <li>\n          <a\n            href=\"#/completed\"\n            className={this.state.idOfA === 3 && 'selected'}\n            onClick={() => this.filterByAndToggleCSS(3, 'Completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n    )\n  }\n}\n\nexport default FilterButtons","import React from 'react'\n\nconst ClearButton = ({ todoList, deleteAllCompletedTodos }) => (\n  <button\n    type=\"button\"\n    className=\"clear-completed\"\n    style={{ display: 'block' }}\n    onClick={deleteAllCompletedTodos}\n  >\n    {todoList.some(todo => todo.completed === true) && 'Clear Completed'}\n  </button>\n)\n\nexport default ClearButton","import React, { Component } from 'react';\nimport InputField from './components/InputField';\nimport ToggleCompleted from './components/ToggleCompleted';\nimport TodoList from './components/TodoList';\nimport FilterButtons from './components/FilterButtons';\nimport ClearButton from './components/ClearButton';\n\nclass App extends Component {\n  state = {\n    todoList: [],\n    filteredTodos: [],\n    count: 1\n  };\n\n  addNewTodo = text => {\n    const todoItem = {\n      title: text,\n      id: this.state.count,\n      completed: false,\n    };\n\n    this.setState(prevState => {\n      const todos = [...prevState.todoList, todoItem];\n      return {\n        todoList: todos,\n        filteredTodos: todos,\n        count: prevState.count + 1,\n      };\n    });\n  };\n\n  countUncompletedTodos = () => {\n    return this.state.todoList\n      .filter(item => item.completed === false).length;\n  };\n\n  deleteAllCompletedTodos = () => {\n    this.setState(prevState => {\n      const uncompletedTodos = prevState.todoList\n        .filter(item => item.completed === false);\n\n      return {\n        todoList: [...uncompletedTodos],\n        filteredTodos: [...uncompletedTodos],\n      }\n\n    })\n  };\n\n  deleteItem = taskId => {\n    this.setState(prevState => {\n      const withoutRemovedItems = prevState.todoList.filter(item => item.id !== taskId);\n      \n        return {\n          todoList: [...withoutRemovedItems],\n          filteredTodos: [...withoutRemovedItems],\n        }\n    })\n  }\n\n  handleFilter = filterBy => {\n    this.setState(prevState => ({\n      filteredTodos: prevState.todoList.filter(item => {\n        switch (filterBy) {\n          case 'Completed':\n            return item.completed;\n\n          case 'Active':\n            return !item.completed;\n\n          default:\n            return item;\n        }\n      })\n    }));\n  };\n\n  toggleAll = () => {\n    this.setState(prevState => {\n      const todos = prevState.todoList.map(todo => ({\n        ...todo,\n        completed: !prevState.todoList.every(todo => todo.completed)\n      }));\n\n      return {\n        todoList: todos,\n        filteredTodos: todos,\n      };\n    });\n  };\n\n  toggleChecked = taskId => {\n    this.setState(prevState => {\n      const todos = prevState.todoList.map(todo => {\n        return todo.id === taskId\n          ? {\n              ...todo,\n              completed: !todo.completed\n            }\n          : todo;\n      });\n\n      return {\n        todoList: todos,\n        filteredTodos: todos,\n      };\n    });\n  };\n\n  render() {\n    const { todoList, filteredTodos } = this.state;\n    const countUncompletedTodos = this.countUncompletedTodos();\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <InputField addNewTodo={this.addNewTodo} />\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <ToggleCompleted toggleAll={this.toggleAll} />\n\n          <TodoList\n            filteredTodos={filteredTodos}\n            toggleChecked={this.toggleChecked}\n            deleteItem={this.deleteItem}\n          />\n        </section>\n\n        <footer className=\"footer\" style={{ display: 'block' }}>\n          <span className=\"todo-count\">\n            {countUncompletedTodos} items left\n          </span>\n\n          <FilterButtons \n            handleFilter={this.handleFilter}\n           />\n\n          <ClearButton \n            todoList={todoList}\n            deleteAllCompletedTodos={this.deleteAllCompletedTodos}\n          />\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}