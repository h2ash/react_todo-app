{"version":3,"sources":["components/InputField.jsx","components/ToggleCompleted.jsx","components/TodoItem.jsx","components/TodoList.jsx","components/FilterButtons.jsx","components/ClearButton.jsx","App.js","index.js"],"names":["InputField","state","title","handleInput","event","value","target","_this","setState","handleSubmit","preventDefault","props","addNewTodo","this","react_default","a","createElement","onSubmit","onBlur","name","onChange","className","placeholder","React","Component","ToggleCompleted","_ref","toggleAll","type","id","htmlFor","TodoItem","isEditing","todo","startEdit","editTitle","editTodo","_this$props","deleteItem","toggleChecked","_this$state","completed","checked","autoFocus","Fragment","onDoubleClick","onClick","TodoList","todoList","filterByButton","filter","item","map","components_TodoItem","key","FilterButtons","idForButton","filterByAndToggleCSS","filteredBy","handleFilter","_this2","href","ClearButton","deleteAllCompletedTodos","style","display","some","App","count","text","todoItem","prevState","concat","Object","toConsumableArray","objectSpread","countUncompletedTodos","length","taskId","filterBy","everyCompleted","every","components_InputField","components_ToggleCompleted","components_TodoList","components_FilterButtons","components_ClearButton","ReactDOM","render","src_App","document","getElementById"],"mappings":"iRA+CeA,6MA5CbC,MAAQ,CACNC,MAAO,MAGTC,YAAc,SAACC,GAAU,IAChBC,EAASD,EAAME,OAAfD,MAEPE,EAAKC,SAAS,CACZN,MAAOG,OAIXI,aAAe,SAACL,GACdA,EAAMM,iBAEFH,EAAKN,MAAMC,QACbK,EAAKI,MAAMC,WAAWL,EAAKN,MAAMC,OAEjCK,EAAKC,SAAS,CACZN,MAAO,+EAKJ,IACAA,EAASW,KAAKZ,MAAdC,MAEP,OACEY,EAAAC,EAAAC,cAAA,QACEC,SAAUJ,KAAKJ,aACfS,OAAQL,KAAKJ,cAEbK,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLd,MAAOH,EACPkB,SAAUP,KAAKV,YACfkB,UAAU,WACVC,YAAY,mCAtCGC,IAAMC,WCiBhBC,EAjBS,SAAAC,GAAiB,IAAfC,EAAeD,EAAfC,UACxB,OACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEY,KAAK,WACLC,GAAG,aACHR,UAAU,aACVD,SAAUO,IAEZb,EAAAC,EAAAC,cAAA,SACAc,QAAQ,cADR,0BC6ESC,6MA7Eb9B,MAAQ,CACN+B,WAAW,EACX9B,MAAOK,EAAKI,MAAMsB,KAAK/B,SAGzBgC,UAAY,WACV3B,EAAKC,SAAS,CACZwB,WAAW,OAIfG,UAAY,SAAC/B,GAAU,IACbC,EAAUD,EAAME,OAAhBD,MAERE,EAAKC,SAAS,CACZN,MAAOG,OAIXI,aAAe,SAACL,GACdA,EAAMM,iBAEFH,EAAKN,MAAMC,QACbK,EAAKI,MAAMyB,SAAS7B,EAAKN,MAAMC,MAAOK,EAAKI,MAAMsB,KAAKJ,IACtDtB,EAAKC,SAAS,CACZwB,WAAW,8EAKR,IAAAK,EACqCxB,KAAKF,MAAzC2B,EADDD,EACCC,WAAYL,EADbI,EACaJ,KAAMM,EADnBF,EACmBE,cADnBC,EAEsB3B,KAAKZ,MAA1B+B,EAFDQ,EAECR,UAAW9B,EAFZsC,EAEYtC,MAEnB,OACEY,EAAAC,EAAAC,cAAA,MAAIK,UAAWY,EAAKQ,UAAY,YAAc,IAC5C3B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACbP,EAAAC,EAAAC,cAAA,SACEY,KAAK,WACLP,UAAU,SACVQ,GAAII,EAAKJ,GACTa,QAAST,EAAKQ,UACdrB,SAAU,kBAAMmB,EAAcN,EAAKJ,OAGnCG,EACIlB,EAAAC,EAAAC,cAAA,QACEC,SAAUJ,KAAKJ,aACfS,OAAQL,KAAKJ,cAEbK,EAAAC,EAAAC,cAAA,SACEI,SAAUP,KAAKsB,UACf9B,MAAOH,EACPmB,UAAU,WACVO,KAAK,OACLe,WAAS,KAGb7B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6B,SAAA,KACE9B,EAAAC,EAAAC,cAAA,SACE6B,cAAehC,KAAKqB,WAEnBD,EAAK/B,OAERY,EAAAC,EAAAC,cAAA,UACEY,KAAK,SACLP,UAAU,UACVyB,QAAS,kBAAMR,EAAWL,EAAKJ,iBApE5BN,IAAMC,WC6BduB,EApCE,SAAArB,GAMX,IALJsB,EAKItB,EALJsB,SACAC,EAIIvB,EAJJuB,eACAV,EAGIb,EAHJa,cACAD,EAEIZ,EAFJY,WACAF,EACIV,EADJU,SAYA,OACEtB,EAAAC,EAAAC,cAAA,MAAIK,UAAU,aACX2B,EACEE,OAAO,SAAAjB,GAAI,OAbAkB,EAaalB,EAZN,cAAnBgB,EACKE,EAAKV,UACgB,WAAnBQ,GACDE,EAAKV,UAENU,EANM,IAACA,IAcXC,IAAI,SAAAnB,GAAI,OACPnB,EAAAC,EAAAC,cAACqC,EAAD,CACEC,IAAKrB,EAAKJ,GACVI,KAAMA,EACNM,cAAeA,EACfD,WAAYA,EACZF,SAAUA,QCsBPmB,6MAjDbtD,MAAQ,CACNuD,YAAa,KAGfC,qBAAuB,SAAC5B,EAAI6B,GAC1BnD,EAAKC,SAAS,CACZgD,YAAa3B,IAGftB,EAAKI,MAAMgD,aAAaD,4EAGjB,IAAAE,EAAA/C,KACP,OACEC,EAAAC,EAAAC,cAAA,MAAIK,UAAU,WACZP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACE6C,KAAK,KACLxC,UAAsC,IAA3BR,KAAKZ,MAAMuD,aAAqB,WAC3CV,QAAS,kBAAMc,EAAKH,qBAAqB,EAAG,SAH9C,QASF3C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACE6C,KAAK,WACLxC,UAAsC,IAA3BR,KAAKZ,MAAMuD,aAAqB,WAC3CV,QAAS,kBAAMc,EAAKH,qBAAqB,EAAG,YAH9C,WASF3C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACE6C,KAAK,cACLxC,UAAsC,IAA3BR,KAAKZ,MAAMuD,aAAqB,WAC3CV,QAAS,kBAAMc,EAAKH,qBAAqB,EAAG,eAH9C,sBArCkBlC,IAAMC,WCWnBsC,EAXK,SAAApC,GAAA,IAAGsB,EAAHtB,EAAGsB,SAAUe,EAAbrC,EAAaqC,wBAAb,OAClBjD,EAAAC,EAAAC,cAAA,UACEY,KAAK,SACLP,UAAU,kBACV2C,MAAO,CAAEC,QAAS,SAClBnB,QAASiB,GAERf,EAASkB,KAAK,SAAAjC,GAAI,OAAuB,IAAnBA,EAAKQ,aAAuB,oBCsJxC0B,6MAjJblE,MAAQ,CACN+C,SAAU,GACVC,eAAgB,GAChBmB,MAAO,KAGTxD,WAAa,SAAAyD,GACX,IAAMC,EAAW,CACfpE,MAAOmE,EACPxC,GAAItB,EAAKN,MAAMmE,MACf3B,WAAW,GAGblC,EAAKC,SAAS,SAAA+D,GAEZ,MAAO,CACLvB,SAFS,GAAAwB,OAAAC,OAAAC,EAAA,EAAAD,CAAOF,EAAUvB,UAAjB,CAA2BsB,IAGpCF,MAAOG,EAAUH,MAAQ,QAK/BhC,SAAW,SAACiC,EAAMxC,GAChBtB,EAAKC,SAAS,SAAA+D,GAUZ,MAAO,CACLvB,SAVYuB,EAAUvB,SAASI,IAAI,SAAAnB,GACnC,OAAOA,EAAKJ,KAAOA,EAAZ4C,OAAAE,EAAA,EAAAF,CAAA,GAEAxC,EAFA,CAGH/B,MAAOmE,IAEPpC,UASV2C,sBAAwB,WACtB,OAAOrE,EAAKN,MAAM+C,SACfE,OAAO,SAAAC,GAAI,OAAKA,EAAKV,YAAWoC,UAGrCd,wBAA0B,WACxBxD,EAAKC,SAAS,SAAA+D,GAIZ,MAAO,CACLvB,SAJuBuB,EAAUvB,SAChCE,OAAO,SAAAC,GAAI,OAAKA,EAAKV,kBAQ5BH,WAAa,SAAAwC,GACXvE,EAAKC,SAAS,SAAA+D,GAGV,MAAO,CACLvB,SAHwBuB,EAAUvB,SAASE,OAAO,SAAAC,GAAI,OAAIA,EAAKtB,KAAOiD,UAQ9EnB,aAAe,SAAAoB,GACbxE,EAAKC,SAAS,CACZyC,eAAgB8B,OAIpBpD,UAAY,WACVpB,EAAKC,SAAS,SAAA+D,GACZ,IAAMS,EAAiBT,EAAUvB,SAASiC,MAAM,SAAAhD,GAAI,OAAIA,EAAKQ,YAM7D,MAAO,CACLO,SANYuB,EAAUvB,SAASI,IAAI,SAAAnB,GAAI,OAAAwC,OAAAE,EAAA,EAAAF,CAAA,GACpCxC,EADoC,CAEvCQ,WAAYuC,YASlBzC,cAAgB,SAAAuC,GACdvE,EAAKC,SAAS,SAAA+D,GAUZ,MAAO,CACLvB,SAVYuB,EAAUvB,SAASI,IAAI,SAAAnB,GACnC,OAAOA,EAAKJ,KAAOiD,EAAZL,OAAAE,EAAA,EAAAF,CAAA,GAEExC,EAFF,CAGDQ,WAAYR,EAAKQ,YAEnBR,gFASD,IAAAO,EAC8B3B,KAAKZ,MAAlC+C,EADDR,EACCQ,SAAUC,EADXT,EACWS,eACZ2B,EAAwB/D,KAAK+D,wBAEnC,OACE9D,EAAAC,EAAAC,cAAA,WAASK,UAAU,WACjBP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,UAChBP,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAACkE,EAAD,CAAYtE,WAAYC,KAAKD,cAG/BE,EAAAC,EAAAC,cAAA,WAASK,UAAU,OAAO2C,MAAO,CAAEC,QAAS,UAC1CnD,EAAAC,EAAAC,cAACmE,EAAD,CAAiBxD,UAAWd,KAAKc,YAEjCb,EAAAC,EAAAC,cAACoE,EAAD,CACEnC,eAAgBA,EAChBD,SAAUA,EACVT,cAAe1B,KAAK0B,cACpBD,WAAYzB,KAAKyB,WACjBF,SAAUvB,KAAKuB,YAInBtB,EAAAC,EAAAC,cAAA,UAAQK,UAAU,SAAS2C,MAAO,CAAEC,QAAS,UAC3CnD,EAAAC,EAAAC,cAAA,QAAMK,UAAU,cACbuD,EADH,eAIA9D,EAAAC,EAAAC,cAACqE,EAAD,CACE1B,aAAc9C,KAAK8C,eAGrB7C,EAAAC,EAAAC,cAACsE,EAAD,CACEtC,SAAUA,EACVe,wBAAyBlD,KAAKkD,mCA1IxBvC,aCPlB+D,IAASC,OACP1E,EAAAC,EAAAC,cAACyE,EAAD,MACAC,SAASC,eAAe","file":"static/js/main.02db4095.chunk.js","sourcesContent":["import React from 'react'\n\nclass InputField extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleInput = (event) => {\n    const {value} = event.target;\n\n    this.setState({\n      title: value,\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.state.title) {\n      this.props.addNewTodo(this.state.title);\n\n      this.setState({\n        title: '',\n      })\n    }\n  }\n\n  render() {\n    const {title} = this.state;\n\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n        onBlur={this.handleSubmit}\n        >\n        <input\n          name='todo'\n          value={title}\n          onChange={this.handleInput}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    )\n  }\n}\n\nexport default InputField","import React from 'react'\n\nconst ToggleCompleted = ({toggleAll}) => {\n  return (\n    <div>\n      <input \n        type=\"checkbox\" \n        id=\"toggle-all\" \n        className=\"toggle-all\" \n        onChange={toggleAll}\n        />\n      <label \n      htmlFor=\"toggle-all\">\n        Mark all as complete\n      </label>\n    </div>\n  )\n}\n\nexport default ToggleCompleted","import React from 'react'\n\n/**\n * [] - сделать css как у input\n * [x] - реализовать исправление элентта по enter и смене функции\n * [] - исправить, чтобы при нажатии на текст элемента не менялся статус\n *    уточка, как это сделать?\n *    а почему меняется сейчас?\n */\n\nclass TodoItem extends React.Component {\n  state = {\n    isEditing: false,\n    title: this.props.todo.title,\n  }\n\n  startEdit = () => {\n    this.setState({\n      isEditing: true,\n    })\n  }\n\n  editTitle = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      title: value,\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.state.title) {\n      this.props.editTodo(this.state.title, this.props.todo.id);\n      this.setState({\n        isEditing: false,\n      })\n    }\n  }\n\n  render() {\n    const { deleteItem, todo, toggleChecked } = this.props;\n    const { isEditing, title } = this.state;\n\n    return (\n      <li className={todo.completed ? 'completed' : ''}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={todo.id}\n            checked={todo.completed}\n            onChange={() => toggleChecked(todo.id)}\n          />\n          {\n            isEditing\n              ? <form\n                  onSubmit={this.handleSubmit}\n                  onBlur={this.handleSubmit}\n                >\n                  <input\n                    onChange={this.editTitle}\n                    value={title}\n                    className='new-todo'\n                    type=\"text\" \n                    autoFocus\n                  />\n                </form>\n              : <>\n                  <label\n                    onDoubleClick={this.startEdit}\n                  >\n                    {todo.title}\n                    </label>\n                  <button\n                    type=\"button\"\n                    className=\"destroy\"\n                    onClick={() => deleteItem(todo.id)}\n                  />\n              </>\n          }\n        </div>\n      </li>\n    )\n  }\n}\n\nexport default TodoItem","import React from 'react'\nimport TodoItem from './TodoItem'\n\nconst TodoList = ({ \n  todoList, \n  filterByButton, \n  toggleChecked, \n  deleteItem,\n  editTodo \n}) => {\n  const filterBy = (item) => {\n    if (filterByButton === 'Completed') {\n      return item.completed;\n    } else if (filterByButton === 'Active') {\n      return !item.completed;\n    } else {\n      return item;\n    }\n  }\n\n  return(\n    <ul className=\"todo-list\">\n      {todoList\n        .filter(todo => filterBy(todo))\n        .map(todo => (\n          <TodoItem \n            key={todo.id}\n            todo={todo}\n            toggleChecked={toggleChecked}\n            deleteItem={deleteItem}\n            editTodo={editTodo}\n          />\n        ))\n      }\n    </ul>\n  )\n\n}\n\nexport default TodoList","import React from 'react'\n\nclass FilterButtons extends React.Component {\n  state = {\n    idForButton: 1,\n  }\n\n  filterByAndToggleCSS = (id, filteredBy) => {\n    this.setState({\n      idForButton: id,\n    });\n\n    this.props.handleFilter(filteredBy);\n  }\n\n  render() {\n    return (\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={this.state.idForButton === 1 && 'selected'}\n            onClick={() => this.filterByAndToggleCSS(1, 'All')}\n          >\n            All\n          </a>\n        </li>\n      \n        <li>\n          <a \n            href=\"#/active\" \n            className={this.state.idForButton === 2 && 'selected'}\n            onClick={() => this.filterByAndToggleCSS(2, 'Active')}\n            >\n            Active\n          </a>\n        </li>\n      \n        <li>\n          <a\n            href=\"#/completed\"\n            className={this.state.idForButton === 3 && 'selected'}\n            onClick={() => this.filterByAndToggleCSS(3, 'Completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n    )\n  }\n}\n\nexport default FilterButtons","import React from 'react'\n\nconst ClearButton = ({ todoList, deleteAllCompletedTodos }) => (\n  <button\n    type=\"button\"\n    className=\"clear-completed\"\n    style={{ display: 'block' }}\n    onClick={deleteAllCompletedTodos}\n  >\n    {todoList.some(todo => todo.completed === true) && 'Clear Completed'}\n  </button>\n)\n\nexport default ClearButton","import React, { Component } from 'react';\nimport InputField from './components/InputField';\nimport ToggleCompleted from './components/ToggleCompleted';\nimport TodoList from './components/TodoList';\nimport FilterButtons from './components/FilterButtons';\nimport ClearButton from './components/ClearButton';\n\n/**\n * [] - добавить возможность редактирования todo по даблклику\n *   [] - превратим в класс TodoItem и добавим туда состояние\n *        и ф-цию для редактирования внутреннего текста todo.title\n */\n\nclass App extends Component {\n  state = {\n    todoList: [],\n    filterByButton: '',\n    count: 1\n  };\n\n  addNewTodo = text => {\n    const todoItem = {\n      title: text,\n      id: this.state.count,\n      completed: false,\n    };\n\n    this.setState(prevState => {\n      const todos = [...prevState.todoList, todoItem];\n      return {\n        todoList: todos,\n        count: prevState.count + 1,\n      };\n    });\n  };\n\n  editTodo = (text, id) => {\n    this.setState(prevState => {\n      const todos = prevState.todoList.map(todo => {\n        return todo.id === id\n          ? {\n            ...todo,\n            title: text,\n          }\n          : todo\n      });\n\n      return {\n        todoList: todos,\n      };\n    });\n  }\n\n  countUncompletedTodos = () => {\n    return this.state.todoList\n      .filter(item => !item.completed).length;\n  };\n\n  deleteAllCompletedTodos = () => {\n    this.setState(prevState => {\n      const uncompletedTodos = prevState.todoList\n        .filter(item => !item.completed);\n\n      return {\n        todoList: uncompletedTodos,\n      }\n    })\n  };\n\n  deleteItem = taskId => {\n    this.setState(prevState => {\n      const withoutRemovedItems = prevState.todoList.filter(item => item.id !== taskId);\n      \n        return {\n          todoList: withoutRemovedItems,\n        }\n    })\n  }\n\n  handleFilter = filterBy => {\n    this.setState({\n      filterByButton: filterBy,\n    });\n  };\n\n  toggleAll = () => {\n    this.setState(prevState => {\n      const everyCompleted = prevState.todoList.every(todo => todo.completed);\n      const todos = prevState.todoList.map(todo => ({\n        ...todo,\n        completed: !everyCompleted,\n      }));\n\n      return {\n        todoList: todos,\n      };\n    });\n  };\n\n  toggleChecked = taskId => {\n    this.setState(prevState => {\n      const todos = prevState.todoList.map(todo => {\n        return todo.id === taskId\n          ? {\n              ...todo,\n              completed: !todo.completed\n            }\n          : todo;\n      });\n\n      return {\n        todoList: todos,\n      };\n    });\n  };\n\n  render() {\n    const { todoList, filterByButton } = this.state;\n    const countUncompletedTodos = this.countUncompletedTodos();\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <InputField addNewTodo={this.addNewTodo} />\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <ToggleCompleted toggleAll={this.toggleAll} />\n\n          <TodoList\n            filterByButton={filterByButton}\n            todoList={todoList}\n            toggleChecked={this.toggleChecked}\n            deleteItem={this.deleteItem}\n            editTodo={this.editTodo}\n          />\n        </section>\n\n        <footer className=\"footer\" style={{ display: 'block' }}>\n          <span className=\"todo-count\">\n            {countUncompletedTodos} items left\n          </span>\n\n          <FilterButtons \n            handleFilter={this.handleFilter}\n           />\n\n          <ClearButton \n            todoList={todoList}\n            deleteAllCompletedTodos={this.deleteAllCompletedTodos}\n          />\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}